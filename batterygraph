#!/bin/env python3

from datetime import datetime, timedelta
import time
import re
import matplotlib.pyplot as plt
from matplotlib import dates
import argparse
from os.path import expanduser

parser = argparse.ArgumentParser()
parser.add_argument("--range", "-r", help="Sets the range for the battery history being plotted; may be \"hour\" or \"day\" or")
parser.add_argument("--gliding", "-g", action="store_true", help="Uses a timeframe with a fixed length of one hour/day instead of using the current hour/day")
args = parser.parse_args()

timestamps = []
values = []

f = open(expanduser("~") + "/.battery_history", "r")

for line in f.readlines():

    match = re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}\:[0-9]{2}\:[0-9]{2}.[0-9]{6}', line)
    if match is not None:
        
        timestamp = datetime.strptime(match.group(0), '%Y-%m-%d %H:%M:%S.%f')
        
        is_valid = True

        if args.range == 'hour':
            if not args.gliding:
                is_valid = timestamp.hour == datetime.today().hour
            is_valid = is_valid and datetime.now() - timestamp < timedelta(hours=1)

        elif args.range == 'day':
            if not args.gliding:
                is_valid = timestamp.day == datetime.today().day
            is_valid = is_valid and datetime.now() - timestamp < timedelta(days=1)

        elif args.range == 'month':
            if not args.gliding:
                is_valid = timestamp.month == datetime.today().month
            is_valid = is_valid and datetime.now() - timestamp < timedelta(days=31)

        else:
            print("No valid range specified. Please refer to the help.")
            exit()

        if is_valid:
            timestamps += [timestamp]
    
            match = re.search(r'([0-9]+)(%)', line)
            if match is not None:
                values += [match.group(1)]

formatter = dates.DateFormatter('%H:%M')

fig,ax = plt.subplots()

plt.gca().xaxis.set_major_formatter(formatter)
plt.title("Battery charge percentage")

plt.plot(timestamps, values)
plt.ylim([0,100])

plt.show()
